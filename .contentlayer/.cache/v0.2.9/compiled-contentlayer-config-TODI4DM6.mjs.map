{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport { remarkCodeHike } from '@code-hike/mdx';\nimport { createRequire } from 'module';\nimport remarkGfm from 'remark-gfm';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrism from 'rehype-prism-plus';\nimport rehypeSlug from 'rehype-slug';\nimport remarkToc from 'remark-toc';\n\nconst require = createRequire(import.meta.url);\nconst theme = require('shiki/themes/monokai.json');\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: '**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n    createdAt: { type: 'string', required: true },\n    updatedAt: { type: 'string', required: true },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `${doc._raw.flattenedPath}`,\n    },\n    headings: {\n      type: 'json',\n      resolve: async (doc) => {\n        const regXCodeBlock = /(?<start>`{3}.*)\\n.*(?<end>`{3})/g;\n        const a = matchAll(regXCodeBlock)\n        const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n        const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n          ({ groups }) => {\n            const flag = groups?.flag;\n            const content = groups?.content;\n            return {\n              level: flag?.length,\n              text: content,\n            };\n          }\n        );\n        return headings;\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: './blog',\n  documentTypes: [Blog],\n  mdx: {\n    remarkPlugins: [\n      [remarkCodeHike, { theme, showCopyButton: true, lineNumbers: true }],\n      remarkGfm,\n      remarkToc,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeCodeTitles,\n      rehypePrism,\n      rehypeAutolinkHeadings,\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,SAAS,sBAAsB;AAC/B,SAAS,qBAAqB;AAC9B,OAAO,eAAe;AACtB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,iBAAiB;AACxB,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAEtB,IAAMA,WAAU,cAAc,YAAY,GAAG;AAC7C,IAAM,QAAQA,SAAQ,2BAA2B;AAE1C,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IAC7D,WAAW,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC5C,WAAW,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC9C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,GAAG,IAAI,KAAK;AAAA,IAChC;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACtB,cAAM,gBAAgB;AACtB,cAAM,IAAI,SAAS,aAAa;AAChC,cAAM,aAAa;AACnB,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC7D,CAAC,EAAE,OAAO,MAAM;AACd,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AACxB,mBAAO;AAAA,cACL,OAAO,MAAM;AAAA,cACb,MAAM;AAAA,YACR;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe;AAAA,MACb,CAAC,gBAAgB,EAAE,OAAO,gBAAgB,MAAM,aAAa,KAAK,CAAC;AAAA,MACnE;AAAA,MACA;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": ["require"]
}
